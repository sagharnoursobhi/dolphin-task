/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.0
 * source: proto/user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace userproto {
    export enum AuthenticationResponseCode {
        AUTHENTICATION_RESPONSE_CODE_SUCCESS = 0,
        AUTHENTICATION_RESPONSE_CODE_ILLEGAL_IP = 1,
        AUTHENTICATION_RESPONSE_CODE_UNAUTHORIZED_TIME = 2,
        AUTHENTICATION_RESPONSE_CODE_ACTIVE_SESSION_LIMIT = 3,
        AUTHENTICATION_RESPONSE_CODE_INACTIVE_ACCOUNT = 4,
        AUTHENTICATION_RESPONSE_CODE_COMPANY_LICENSE_EXPIRED = 5
    }
    export class SignInRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
            server_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("server_address" in data && data.server_address != undefined) {
                    this.server_address = data.server_address;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get server_address() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set server_address(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
            server_address?: string;
        }): SignInRequest {
            const message = new SignInRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.server_address != null) {
                message.server_address = data.server_address;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
                server_address?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.server_address != null) {
                data.server_address = this.server_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.server_address.length)
                writer.writeString(7, this.server_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignInRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 7:
                        message.server_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignInRequest {
            return SignInRequest.deserialize(bytes);
        }
    }
    export class SignInResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            response_code?: AuthenticationResponseCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("response_code" in data && data.response_code != undefined) {
                    this.response_code = data.response_code;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get response_code() {
            return pb_1.Message.getFieldWithDefault(this, 4, AuthenticationResponseCode.AUTHENTICATION_RESPONSE_CODE_SUCCESS) as AuthenticationResponseCode;
        }
        set response_code(value: AuthenticationResponseCode) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            token?: string;
            response_code?: AuthenticationResponseCode;
        }): SignInResponse {
            const message = new SignInResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.response_code != null) {
                message.response_code = data.response_code;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                response_code?: AuthenticationResponseCode;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.response_code != null) {
                data.response_code = this.response_code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(2, this.token);
            if (this.response_code != AuthenticationResponseCode.AUTHENTICATION_RESPONSE_CODE_SUCCESS)
                writer.writeEnum(4, this.response_code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignInResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.token = reader.readString();
                        break;
                    case 4:
                        message.response_code = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignInResponse {
            return SignInResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedUserServiceService {
        static definition = {
            SignIn: {
                path: "/userproto.UserService/SignIn",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SignInRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SignInRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SignInResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SignInResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SignIn(call: grpc_1.ServerUnaryCall<SignInRequest, SignInResponse>, callback: grpc_1.sendUnaryData<SignInResponse>): void;
    }
    export class UserServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedUserServiceService.definition, "UserService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        SignIn: GrpcUnaryServiceInterface<SignInRequest, SignInResponse> = (message: SignInRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SignInResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SignInResponse>, callback?: grpc_1.requestCallback<SignInResponse>): grpc_1.ClientUnaryCall => {
            return super.SignIn(message, metadata, options, callback);
        };
    }
}
