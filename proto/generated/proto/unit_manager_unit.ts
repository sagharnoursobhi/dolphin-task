/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.0
 * source: proto/unit_manager_unit.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace unit_management.v1 {
    export enum OrderBy {
        ASCENDING = 0,
        DESCENDING = 1
    }
    export enum ConnectionState {
        CONNECTION_STATE_INIT = 0,
        CONNECTION_STATE_MESSAGE_SENT = 1,
        CONNECTION_STATE_MESSAGE_DELIVERED = 2,
        CONNECTION_STATE_DEVICE_CONNECTED = 3,
        CONNECTION_STATE_DEVICE_CONFIG_SET = 4,
        CONNECTION_STATE_DEVICE_FAILED = 5
    }
    export class Unit extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            title?: string;
            icon?: string;
            plate_number?: string;
            connection_state?: ConnectionState;
            sim_number?: string;
            is_archive?: boolean;
            device_type?: string;
            imei?: string;
            last_point_time?: number;
            created_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("icon" in data && data.icon != undefined) {
                    this.icon = data.icon;
                }
                if ("plate_number" in data && data.plate_number != undefined) {
                    this.plate_number = data.plate_number;
                }
                if ("connection_state" in data && data.connection_state != undefined) {
                    this.connection_state = data.connection_state;
                }
                if ("sim_number" in data && data.sim_number != undefined) {
                    this.sim_number = data.sim_number;
                }
                if ("is_archive" in data && data.is_archive != undefined) {
                    this.is_archive = data.is_archive;
                }
                if ("device_type" in data && data.device_type != undefined) {
                    this.device_type = data.device_type;
                }
                if ("imei" in data && data.imei != undefined) {
                    this.imei = data.imei;
                }
                if ("last_point_time" in data && data.last_point_time != undefined) {
                    this.last_point_time = data.last_point_time;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get icon() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set icon(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get plate_number() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set plate_number(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get connection_state() {
            return pb_1.Message.getFieldWithDefault(this, 5, ConnectionState.CONNECTION_STATE_INIT) as ConnectionState;
        }
        set connection_state(value: ConnectionState) {
            pb_1.Message.setField(this, 5, value);
        }
        get sim_number() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set sim_number(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get is_archive() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set is_archive(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get device_type() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set device_type(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get imei() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set imei(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get last_point_time() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set last_point_time(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            id?: number;
            title?: string;
            icon?: string;
            plate_number?: string;
            connection_state?: ConnectionState;
            sim_number?: string;
            is_archive?: boolean;
            device_type?: string;
            imei?: string;
            last_point_time?: number;
            created_at?: number;
        }): Unit {
            const message = new Unit({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.icon != null) {
                message.icon = data.icon;
            }
            if (data.plate_number != null) {
                message.plate_number = data.plate_number;
            }
            if (data.connection_state != null) {
                message.connection_state = data.connection_state;
            }
            if (data.sim_number != null) {
                message.sim_number = data.sim_number;
            }
            if (data.is_archive != null) {
                message.is_archive = data.is_archive;
            }
            if (data.device_type != null) {
                message.device_type = data.device_type;
            }
            if (data.imei != null) {
                message.imei = data.imei;
            }
            if (data.last_point_time != null) {
                message.last_point_time = data.last_point_time;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                title?: string;
                icon?: string;
                plate_number?: string;
                connection_state?: ConnectionState;
                sim_number?: string;
                is_archive?: boolean;
                device_type?: string;
                imei?: string;
                last_point_time?: number;
                created_at?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.icon != null) {
                data.icon = this.icon;
            }
            if (this.plate_number != null) {
                data.plate_number = this.plate_number;
            }
            if (this.connection_state != null) {
                data.connection_state = this.connection_state;
            }
            if (this.sim_number != null) {
                data.sim_number = this.sim_number;
            }
            if (this.is_archive != null) {
                data.is_archive = this.is_archive;
            }
            if (this.device_type != null) {
                data.device_type = this.device_type;
            }
            if (this.imei != null) {
                data.imei = this.imei;
            }
            if (this.last_point_time != null) {
                data.last_point_time = this.last_point_time;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.icon.length)
                writer.writeString(3, this.icon);
            if (this.plate_number.length)
                writer.writeString(4, this.plate_number);
            if (this.connection_state != ConnectionState.CONNECTION_STATE_INIT)
                writer.writeEnum(5, this.connection_state);
            if (this.sim_number.length)
                writer.writeString(6, this.sim_number);
            if (this.is_archive != false)
                writer.writeBool(7, this.is_archive);
            if (this.device_type.length)
                writer.writeString(8, this.device_type);
            if (this.imei.length)
                writer.writeString(9, this.imei);
            if (this.last_point_time != 0)
                writer.writeUint32(10, this.last_point_time);
            if (this.created_at != 0)
                writer.writeUint32(11, this.created_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Unit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Unit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.icon = reader.readString();
                        break;
                    case 4:
                        message.plate_number = reader.readString();
                        break;
                    case 5:
                        message.connection_state = reader.readEnum();
                        break;
                    case 6:
                        message.sim_number = reader.readString();
                        break;
                    case 7:
                        message.is_archive = reader.readBool();
                        break;
                    case 8:
                        message.device_type = reader.readString();
                        break;
                    case 9:
                        message.imei = reader.readString();
                        break;
                    case 10:
                        message.last_point_time = reader.readUint32();
                        break;
                    case 11:
                        message.created_at = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Unit {
            return Unit.deserialize(bytes);
        }
    }
    export class UnitsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            limit?: number;
            query_filter?: string;
            offset?: number;
            order_bys?: OrderBy[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("query_filter" in data && data.query_filter != undefined) {
                    this.query_filter = data.query_filter;
                }
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("order_bys" in data && data.order_bys != undefined) {
                    this.order_bys = data.order_bys;
                }
            }
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get query_filter() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set query_filter(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get order_bys() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as OrderBy[];
        }
        set order_bys(value: OrderBy[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            limit?: number;
            query_filter?: string;
            offset?: number;
            order_bys?: OrderBy[];
        }): UnitsRequest {
            const message = new UnitsRequest({});
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.query_filter != null) {
                message.query_filter = data.query_filter;
            }
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.order_bys != null) {
                message.order_bys = data.order_bys;
            }
            return message;
        }
        toObject() {
            const data: {
                limit?: number;
                query_filter?: string;
                offset?: number;
                order_bys?: OrderBy[];
            } = {};
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.query_filter != null) {
                data.query_filter = this.query_filter;
            }
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.order_bys != null) {
                data.order_bys = this.order_bys;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.limit != 0)
                writer.writeUint32(1, this.limit);
            if (this.query_filter.length)
                writer.writeString(2, this.query_filter);
            if (this.offset != 0)
                writer.writeUint32(3, this.offset);
            if (this.order_bys.length)
                writer.writePackedEnum(4, this.order_bys);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnitsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnitsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.limit = reader.readUint32();
                        break;
                    case 2:
                        message.query_filter = reader.readString();
                        break;
                    case 3:
                        message.offset = reader.readUint32();
                        break;
                    case 4:
                        message.order_bys = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnitsRequest {
            return UnitsRequest.deserialize(bytes);
        }
    }
    export class UnitsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            total_count?: number;
            units?: Unit[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("total_count" in data && data.total_count != undefined) {
                    this.total_count = data.total_count;
                }
                if ("units" in data && data.units != undefined) {
                    this.units = data.units;
                }
            }
        }
        get total_count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set total_count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get units() {
            return pb_1.Message.getRepeatedWrapperField(this, Unit, 2) as Unit[];
        }
        set units(value: Unit[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            total_count?: number;
            units?: ReturnType<typeof Unit.prototype.toObject>[];
        }): UnitsResponse {
            const message = new UnitsResponse({});
            if (data.total_count != null) {
                message.total_count = data.total_count;
            }
            if (data.units != null) {
                message.units = data.units.map(item => Unit.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                total_count?: number;
                units?: ReturnType<typeof Unit.prototype.toObject>[];
            } = {};
            if (this.total_count != null) {
                data.total_count = this.total_count;
            }
            if (this.units != null) {
                data.units = this.units.map((item: Unit) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.total_count != 0)
                writer.writeUint32(1, this.total_count);
            if (this.units.length)
                writer.writeRepeatedMessage(2, this.units, (item: Unit) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnitsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnitsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.total_count = reader.readUint32();
                        break;
                    case 2:
                        reader.readMessage(message.units, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Unit.deserialize(reader), Unit));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnitsResponse {
            return UnitsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedUnitManagementServiceService {
        static definition = {
            Units: {
                path: "/unit_management.v1.UnitManagementService/Units",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UnitsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UnitsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UnitsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UnitsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Units(call: grpc_1.ServerUnaryCall<UnitsRequest, UnitsResponse>, callback: grpc_1.sendUnaryData<UnitsResponse>): void;
    }
    export class UnitManagementServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedUnitManagementServiceService.definition, "UnitManagementService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Units: GrpcUnaryServiceInterface<UnitsRequest, UnitsResponse> = (message: UnitsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UnitsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UnitsResponse>, callback?: grpc_1.requestCallback<UnitsResponse>): grpc_1.ClientUnaryCall => {
            return super.Units(message, metadata, options, callback);
        };
    }
}
