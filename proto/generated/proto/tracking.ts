/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.0
 * source: proto/tracking.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace unittracking {
    export enum Format {
        FORMAT_UNKNOWN = 0,
        FORMAT_NUMBER = 1,
        FORMAT_LENGTH = 2,
        FORMAT_DURATION_TIME = 3,
        FORMAT_TIME = 4,
        FORMAT_BOOLEAN = 5,
        FORMAT_SPEED = 6,
        FORMAT_VOLUME = 7,
        FORMAT_ANGLE = 8,
        FORMAT_WEIGHT = 9,
        FORMAT_TEMPERATURE = 10,
        FORMAT_SIGNAL_STRENGTH = 11,
        FORMAT_ROTATIONAL_SPEED = 12,
        FORMAT_ACCELERATION = 13
    }
    export class UnitsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            limit?: number;
            offset?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
            }
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            limit?: number;
            offset?: number;
        }): UnitsRequest {
            const message = new UnitsRequest({});
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.offset != null) {
                message.offset = data.offset;
            }
            return message;
        }
        toObject() {
            const data: {
                limit?: number;
                offset?: number;
            } = {};
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.offset != null) {
                data.offset = this.offset;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.limit != 0)
                writer.writeUint32(1, this.limit);
            if (this.offset != 0)
                writer.writeUint32(2, this.offset);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnitsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnitsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.limit = reader.readUint32();
                        break;
                    case 2:
                        message.offset = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnitsRequest {
            return UnitsRequest.deserialize(bytes);
        }
    }
    export class UnitsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            units?: Unit[];
            total_units?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("units" in data && data.units != undefined) {
                    this.units = data.units;
                }
                if ("total_units" in data && data.total_units != undefined) {
                    this.total_units = data.total_units;
                }
            }
        }
        get units() {
            return pb_1.Message.getRepeatedWrapperField(this, Unit, 1) as Unit[];
        }
        set units(value: Unit[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_units() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_units(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            units?: ReturnType<typeof Unit.prototype.toObject>[];
            total_units?: number;
        }): UnitsResponse {
            const message = new UnitsResponse({});
            if (data.units != null) {
                message.units = data.units.map(item => Unit.fromObject(item));
            }
            if (data.total_units != null) {
                message.total_units = data.total_units;
            }
            return message;
        }
        toObject() {
            const data: {
                units?: ReturnType<typeof Unit.prototype.toObject>[];
                total_units?: number;
            } = {};
            if (this.units != null) {
                data.units = this.units.map((item: Unit) => item.toObject());
            }
            if (this.total_units != null) {
                data.total_units = this.total_units;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.units.length)
                writer.writeRepeatedMessage(1, this.units, (item: Unit) => item.serialize(writer));
            if (this.total_units != 0)
                writer.writeUint32(2, this.total_units);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnitsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnitsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.units, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Unit.deserialize(reader), Unit));
                        break;
                    case 2:
                        message.total_units = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnitsResponse {
            return UnitsResponse.deserialize(bytes);
        }
    }
    export class Unit extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            title?: string;
            icon?: string;
            metric_name?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("icon" in data && data.icon != undefined) {
                    this.icon = data.icon;
                }
                if ("metric_name" in data && data.metric_name != undefined) {
                    this.metric_name = data.metric_name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get icon() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set icon(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get metric_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set metric_name(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: number;
            title?: string;
            icon?: string;
            metric_name?: string[];
        }): Unit {
            const message = new Unit({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.icon != null) {
                message.icon = data.icon;
            }
            if (data.metric_name != null) {
                message.metric_name = data.metric_name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                title?: string;
                icon?: string;
                metric_name?: string[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.icon != null) {
                data.icon = this.icon;
            }
            if (this.metric_name != null) {
                data.metric_name = this.metric_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.icon.length)
                writer.writeString(4, this.icon);
            if (this.metric_name.length)
                writer.writeRepeatedString(5, this.metric_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Unit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Unit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 4:
                        message.icon = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Unit {
            return Unit.deserialize(bytes);
        }
    }
    export class LastValuesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            unit_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("unit_ids" in data && data.unit_ids != undefined) {
                    this.unit_ids = data.unit_ids;
                }
            }
        }
        get unit_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set unit_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            unit_ids?: number[];
        }): LastValuesRequest {
            const message = new LastValuesRequest({});
            if (data.unit_ids != null) {
                message.unit_ids = data.unit_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                unit_ids?: number[];
            } = {};
            if (this.unit_ids != null) {
                data.unit_ids = this.unit_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.unit_ids.length)
                writer.writePackedUint64(1, this.unit_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LastValuesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LastValuesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.unit_ids = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LastValuesRequest {
            return LastValuesRequest.deserialize(bytes);
        }
    }
    export class LastValuesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            points?: Point[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("points" in data && data.points != undefined) {
                    this.points = data.points;
                }
            }
        }
        get points() {
            return pb_1.Message.getRepeatedWrapperField(this, Point, 1) as Point[];
        }
        set points(value: Point[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            points?: ReturnType<typeof Point.prototype.toObject>[];
        }): LastValuesResponse {
            const message = new LastValuesResponse({});
            if (data.points != null) {
                message.points = data.points.map(item => Point.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                points?: ReturnType<typeof Point.prototype.toObject>[];
            } = {};
            if (this.points != null) {
                data.points = this.points.map((item: Point) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.points.length)
                writer.writeRepeatedMessage(1, this.points, (item: Point) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LastValuesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LastValuesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.points, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Point.deserialize(reader), Point));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LastValuesResponse {
            return LastValuesResponse.deserialize(bytes);
        }
    }
    export class Point extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            unit_id?: number;
            time?: number;
            metric_values?: Map<string, number>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("unit_id" in data && data.unit_id != undefined) {
                    this.unit_id = data.unit_id;
                }
                if ("time" in data && data.time != undefined) {
                    this.time = data.time;
                }
                if ("metric_values" in data && data.metric_values != undefined) {
                    this.metric_values = data.metric_values;
                }
            }
            if (!this.metric_values)
                this.metric_values = new Map();
        }
        get unit_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set unit_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get time() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set time(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get metric_values() {
            return pb_1.Message.getField(this, 3) as any as Map<string, number>;
        }
        set metric_values(value: Map<string, number>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        static fromObject(data: {
            unit_id?: number;
            time?: number;
            metric_values?: {
                [key: string]: number;
            };
        }): Point {
            const message = new Point({});
            if (data.unit_id != null) {
                message.unit_id = data.unit_id;
            }
            if (data.time != null) {
                message.time = data.time;
            }
            if (typeof data.metric_values == "object") {
                message.metric_values = new Map(Object.entries(data.metric_values));
            }
            return message;
        }
        toObject() {
            const data: {
                unit_id?: number;
                time?: number;
                metric_values?: {
                    [key: string]: number;
                };
            } = {};
            if (this.unit_id != null) {
                data.unit_id = this.unit_id;
            }
            if (this.time != null) {
                data.time = this.time;
            }
            if (this.metric_values != null) {
                data.metric_values = (Object.fromEntries)(this.metric_values);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.unit_id != 0)
                writer.writeUint64(1, this.unit_id);
            if (this.time != 0)
                writer.writeInt64(2, this.time);
            for (const [key, value] of this.metric_values) {
                writer.writeMessage(3, this.metric_values, () => {
                    writer.writeString(1, key);
                    writer.writeDouble(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Point {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Point();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.unit_id = reader.readUint64();
                        break;
                    case 2:
                        message.time = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metric_values as any, reader, reader.readString, reader.readDouble));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Point {
            return Point.deserialize(bytes);
        }
    }
    export class MetricsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            language?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("language" in data && data.language != undefined) {
                    this.language = data.language;
                }
            }
        }
        get language() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set language(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            language?: string;
        }): MetricsRequest {
            const message = new MetricsRequest({});
            if (data.language != null) {
                message.language = data.language;
            }
            return message;
        }
        toObject() {
            const data: {
                language?: string;
            } = {};
            if (this.language != null) {
                data.language = this.language;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.language.length)
                writer.writeString(1, this.language);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MetricsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MetricsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.language = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MetricsRequest {
            return MetricsRequest.deserialize(bytes);
        }
    }
    export class MetricsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metrics?: Map<string, Metric>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
            }
            if (!this.metrics)
                this.metrics = new Map();
        }
        get metrics() {
            return pb_1.Message.getField(this, 1) as any as Map<string, Metric>;
        }
        set metrics(value: Map<string, Metric>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            metrics?: {
                [key: string]: ReturnType<typeof Metric.prototype.toObject>;
            };
        }): MetricsResponse {
            const message = new MetricsResponse({});
            if (typeof data.metrics == "object") {
                message.metrics = new Map(Object.entries(data.metrics).map(([key, value]) => [key, Metric.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                metrics?: {
                    [key: string]: ReturnType<typeof Metric.prototype.toObject>;
                };
            } = {};
            if (this.metrics != null) {
                data.metrics = (Object.fromEntries)((Array.from)(this.metrics).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.metrics) {
                writer.writeMessage(1, this.metrics, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MetricsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MetricsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metrics as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = Metric.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MetricsResponse {
            return MetricsResponse.deserialize(bytes);
        }
    }
    export class Metric extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            title?: string;
            icon?: string;
            format?: Format;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("icon" in data && data.icon != undefined) {
                    this.icon = data.icon;
                }
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
            }
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get icon() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set icon(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get format() {
            return pb_1.Message.getFieldWithDefault(this, 4, Format.FORMAT_UNKNOWN) as Format;
        }
        set format(value: Format) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            title?: string;
            icon?: string;
            format?: Format;
        }): Metric {
            const message = new Metric({});
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.icon != null) {
                message.icon = data.icon;
            }
            if (data.format != null) {
                message.format = data.format;
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
                icon?: string;
                format?: Format;
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.icon != null) {
                data.icon = this.icon;
            }
            if (this.format != null) {
                data.format = this.format;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.icon.length)
                writer.writeString(3, this.icon);
            if (this.format != Format.FORMAT_UNKNOWN)
                writer.writeEnum(4, this.format);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Metric {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Metric();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.icon = reader.readString();
                        break;
                    case 4:
                        message.format = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Metric {
            return Metric.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTrackingServiceService {
        static definition = {
            Units: {
                path: "/unittracking.TrackingService/Units",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UnitsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UnitsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UnitsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UnitsResponse.deserialize(new Uint8Array(bytes))
            },
            LastValues: {
                path: "/unittracking.TrackingService/LastValues",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: LastValuesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LastValuesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LastValuesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LastValuesResponse.deserialize(new Uint8Array(bytes))
            },
            Metrics: {
                path: "/unittracking.TrackingService/Metrics",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MetricsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MetricsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MetricsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MetricsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Units(call: grpc_1.ServerUnaryCall<UnitsRequest, UnitsResponse>, callback: grpc_1.sendUnaryData<UnitsResponse>): void;
        abstract LastValues(call: grpc_1.ServerWritableStream<LastValuesRequest, LastValuesResponse>): void;
        abstract Metrics(call: grpc_1.ServerUnaryCall<MetricsRequest, MetricsResponse>, callback: grpc_1.sendUnaryData<MetricsResponse>): void;
    }
    export class TrackingServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTrackingServiceService.definition, "TrackingService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Units: GrpcUnaryServiceInterface<UnitsRequest, UnitsResponse> = (message: UnitsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UnitsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UnitsResponse>, callback?: grpc_1.requestCallback<UnitsResponse>): grpc_1.ClientUnaryCall => {
            return super.Units(message, metadata, options, callback);
        };
        LastValues: GrpcStreamServiceInterface<LastValuesRequest, LastValuesResponse> = (message: LastValuesRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<LastValuesResponse> => {
            return super.LastValues(message, metadata, options);
        };
        Metrics: GrpcUnaryServiceInterface<MetricsRequest, MetricsResponse> = (message: MetricsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MetricsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MetricsResponse>, callback?: grpc_1.requestCallback<MetricsResponse>): grpc_1.ClientUnaryCall => {
            return super.Metrics(message, metadata, options, callback);
        };
    }
}
